<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
   http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
   http://www.springframework.org/schema/aop 
   http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-3.2.xsd">
	<!-- IOC开始 -->
	<!-- 定义一个对象bean -->
	<!-- <bean id="student" class="com.cblue.spring01.ioc.Student"></bean> -->
	<!-- 定义一个对象的别名 -->
	<!-- <alias name="student" alias="mystudent"/> -->
	<!-- 定义一个工厂静态方法 -->
	<!-- <bean id="student_factory_staticmethod" class="com.cblue.spring01.ioc.StudentFactoryStaticMethod" 
		factory-method="getInstance"></bean> -->
	<!-- 定义一个工厂普通方法 -->
	<!-- <bean id="student_factory" class="com.cblue.spring01.ioc.StudentFactoryMethod"></bean> 
		<bean id="student02" factory-bean="student_factory" factory-method="createStudent"></bean> -->

	<!-- 创建对象是单例还是多例 -->
	<!-- 默认单例 -->
	<!-- <bean id="user01" class="com.cblue.spring02.scope.User"></bean>
	<bean id="user02" class="com.cblue.spring02.scope.User" scope="prototype"></bean> -->

	<!-- 对象创建是否懒初始化 -->
	<!-- <bean id="customer01" class="com.cblue.spring03.lazy.Customer"></bean> -->
	<!-- <bean id="customer02" class="com.cblue.spring03.lazy.Customer"
		lazy-init="true"></bean> -->


	<!-- 对象的生命周期方法 -->
	<!-- <bean id="computer" class="com.cblue.spring04.cyclelife.Computer" init-method="init" 
		destroy-method="destory"></bean> -->
	<!-- DI开始 -->
	<!-- 通过setter设置属性 -->
	<!-- <bean id="person01" class="com.cblue.spring05.di.Person">
		<property name="name" value="zhangsan"></property>
		<property name="age" value="20"></property>
	</bean>  -->
	<!-- 通过构造函数设置 -->
	<!-- <bean id="person02" class="com.cblue.spring05.di.Person">
		<constructor-arg value="lisi"></constructor-arg>
		<constructor-arg value="12"></constructor-arg>
	</bean> -->
	<!-- 通过spel注入数据 -->
	<bean id="person03" class="com.cblue.spring05.di.Person">
		<property name="name" value="王五"></property>
		<property name="age" value="30"></property>
	</bean> 
	
	<bean id="person04" class="com.cblue.spring05.di.Person">
		<property name="name" value="#{person03.name}"></property>
		<property name="age" value="#{person03.age}"></property>
	</bean>
	

	<!-- 复杂对象注入 -->
	<bean id="department" class="com.cblue.spring05.di.Department">
		<property name="did" value="01"></property>
		<property name="dname" value="技术部"></property>
		<property name="employee" ref="employee"></property>
		 <property name="lists">  
                    <list>  
                        <value>list1</value>  
                        <value>list2</value>  
                        <ref bean="employee"/>  
                    </list>  
         </property>  
         <property name="map">  
                    <map>  
                        <entry key="m1">  
                            <value>map1</value>  
                        </entry>  
                        <entry key="map2">  
                            <ref bean="employee"/>  
                        </entry>  
                    </map>  
          </property>  
	</bean>
	
	<bean id="employee" class="com.cblue.spring05.di.Employee">
		<property name="eid" value="100"></property>
		<property name="ename" value="张三"></property>
	</bean>
	
	<!-- 使用di实现mvc -->
	 <bean id="personDao" class="com.cblue.spring06.mvc.PersonDaoImpl"></bean>
     <bean id="personService" class="com.cblue.spring06.mvc.PersonServiceImpl">
        <property name="personDao">
          <ref bean="personDao"/>
        </property>
     </bean>
     <bean id="personAction" class="com.cblue.spring06.mvc.PersonAction">
        <property name="personService">
           <ref bean="personService"/>
        </property>
     </bean>
     
    <!-- 使用xml实现继承 使用parent属性 -->
    <bean id="person" class="com.cblue.spring07.extend.Person">
      <property name="name">
        <value>zhangsan</value>
      </property>
    </bean>
    <bean id="student" class="com.cblue.spring07.extend.Student" parent="person"></bean>
    
    
     
     <!-- 使用annotation实现di -->
     <bean id="person" class="com.cblue.spring08.annotation.di.Person"></bean>
     <bean id="student" class="com.cblue.spring08.annotation.di.Student"></bean>
     <context:annotation-config></context:annotation-config>
	
	
	   <!-- 使用annotation实现生命周期 -->
     <bean id="computer" class="com.cblue.spring09.annotation.cyclelife.Computer"></bean>
     <context:annotation-config></context:annotation-config>
     
       <!-- 注解自动扫描对象 -->
    <context:component-scan base-package="com.cblue.spring10.annotation.ioc"></context:component-scan>
    
       <!-- 注解自动扫描对象实现mvc -->
    <context:component-scan base-package="com.cblue.spring11.annotation.mvc"></context:component-scan>
	
	
    
    <!-- 使用annotation实现继承 -->
	<context:component-scan base-package="com.cblue.spring12.annotation.extend"></context:component-scan>
    
    
    <!-- 
	xml实现AOP
	 导入目标类
	 导入切面
	 配置AOP
	 -->
	 <bean id="personDao" class="com.cblue.spring14.aop.PersonDaoImpl"></bean>
	 <bean id="transaction" class="com.cblue.spring14.aop.Transaction"></bean>
	 <aop:config>
	   <aop:pointcut expression="execution(* com.cblue.spring14.aop.*.*(..))" id="pointcut"/>
	   <!-- ref指向切点-->
	   <aop:aspect ref="transaction">
	      <!-- 前置通知 -->
	      <aop:before method="beginTransaction" pointcut-ref="pointcut"/>
	       <!-- 后置通知 -->
	      <aop:after-returning method="commit" pointcut-ref="pointcut"/>
	   </aop:aspect>
	 </aop:config>
	
	  
	 <!--各类通知-->
	 <bean id="personDao" class="com.cblue.spring15.aop.advice.PersonDaoImpl"></bean>
	 <bean id="transaction" class="com.cblue.spring15.aop.advice.Transaction"></bean>
   <aop:config>
	   <aop:pointcut expression="execution(* com.cblue.spring15.aop.advice.*.*(..))" id="pointcut"/>
	   <!-- ref指向切点 -->
	   <aop:aspect ref="transaction">
	     <!--  前置通知 -->
	      <aop:before method="beginTransaction" pointcut-ref="pointcut"/>
	     <!--  后置返回通知  val是方法的参数-->
	     <aop:after-returning method="commit" pointcut-ref="pointcut" returning="val"/> 
	      <!-- 异常通知  ex异常方法的返回参数-->
	      <aop:after-throwing method="exceptionMethod" pointcut-ref="pointcut" throwing="ex"/>
	      <!-- 最终通知 一定要执行的通知 -->
	      <aop:after method="finallyMethod"  pointcut-ref="pointcut"/>
	      <!-- 环绕通知 -->
	      <aop:around method="aroundMethod"  pointcut-ref="pointcut"/>
	   </aop:aspect>
	 </aop:config>
	 
	 <!-- annotation实现AOP-->
	 <context:component-scan base-package="com.cblue.spring16.annotation.aop"></context:component-scan>
	 <!-- 切面自动代理 -->
	 <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	 
	 
	 <!-- 集成JDBCTemplate -->
	<bean id="userDao" class="com.cblue.spring17.jdbc.UserDaoImpl">
	   <property name="dataSource">
	       <ref bean="dataSource"/>
	    </property>
	</bean>
	<bean id="userService" class="com.cblue.spring17.jdbc.UserServiceImpl">
	    <property name="userDao">
	       <ref bean="userDao"/>
	    </property>
	</bean>
	
	
	<!-- 声明式事务 -->
	<bean id="userDao" class="com.cblue.spring19.tx.UserDaoImpl">
	   <property name="dataSource">
	       <ref bean="dataSource"/>
	    </property>
	</bean>
	<bean id="userService" class="com.cblue.spring19.tx.UserServiceImpl">
	    <property name="userDao">
	       <ref bean="userDao"/>
	    </property>
	</bean>
	<!-- 注册事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	   <property name="dataSource">
	     <ref bean="dataSource"/>
	   </property>
	</bean>
	<!-- 声明事务策略 -->
	<!-- <tx:advice id="tx" transaction-manager="transactionManager">
	    <tx:attributes>
	         
	          name=目标方法，save*以save开头的方法
	          isolation="DEFAULT"  隔离属性  解决脏读，幻读
	          propagation="REQUIRED" 传播属性  解决事务嵌套问题
	          当不同service的方法，在同一个方法中被调用的时候，会出现事务嵌套。这时候，先调用里面每个方法的事务，在调用本方法事务
	          read-only true 只读事务，只能读   false读写事务
	         
	        <tx:method name="sav*" isolation="DEFAULT" propagation="REQUIRED" read-only="false"/>
	    </tx:attributes>
	</tx:advice> -->
	<!-- 注册事务 -->
	<aop:config>
	  <aop:pointcut expression="execution(* com.cblue.spring19.tx.UserServiceImpl.*(..))" id="pointcut"/>
	  <aop:advisor advice-ref="tx" pointcut-ref="pointcut"/>
	</aop:config>


	 
	
	
	
</beans>


